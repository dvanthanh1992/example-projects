name: Packer pipeline for building VM templates
run-name: >
  Build image : ${{ inputs.common_os_name }}${{ inputs.common_os_version }} -
  Branch : ${{ github.ref_name }} -
  Site : ${{ inputs.build_site }} -
  Target : ${{ inputs.target_site }}
on: 
  workflow_dispatch:
    inputs:

      build_site:
        description: 'Build Site'
        required: true
        default: 'hcm-lab'

      target_site:
        type: choice
        description: 'Target Site'
        required: true
        default: 'jp-default'
        options:
          - 'jp-default'
          - 'jp-s14-stg'

      common_os_family:
        type: choice
        description: "The guest operating system family. Used for Github Action. (e.g. linux or windows)"
        required: true
        default: 'linux'
        options:
          - 'linux'
          - 'windows'

      common_os_name:
        type: choice
        description: "The guest operating system name. Used for Github Action . (e.g. rhel, ubuntu,...)"
        required: true
        default: 'rhel'
        options:
          - 'rhel'
          - 'alma'
          - 'ubuntu'

      common_os_version:
        type: choice
        description: "The guest operating system version. Used for Github Action. (e.g. 8,9,20-04,...)"
        required: true
        options:
          - '8'
          - '9'

      vm_ip_address:
        description: "IP of the guest operating system."
        required: true

permissions:
  contents: read
  packages: read

env:
  ANSIBLE_COLLECTIONS_PATHS: /root/.ansible/collections:/usr/share/ansible/collections

jobs:
  pre:
    runs-on: [self-hosted]
    container:
      image: ubuntu:20.04
    steps:
      - uses: actions/checkout@v4

      - name: Load env from default location
        run: >-
          grep -v -e '^\s*#' -e '^\s*$' "vm-template/build-env/${{ inputs.build_site }}.env"
          >> $GITHUB_ENV
    outputs:
      ansible_image: ${{ env.ANSIBLE_IMAGE }}
      ansible_runner: ${{ env.ANSIBLE_RUNNER }}

  build-template:
    needs: [pre]
    runs-on: [self-hosted, "${{ needs.pre.outputs.ansible_runner }}"]
    environment: "${{ inputs.build_site }}"
    container:
          image: "${{ needs.pre.outputs.ansible_image }}"
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock
          credentials:
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load env from default location
        run: >-
          grep -v -e '^\s*#' -e '^\s*$' "vm-template/build-env/${{ inputs.build_site }}.env"
          >> $GITHUB_ENV

      # DEBUG
      - name: Print env
        run: |
          printenv

      # DEBUG
      - name: Print ansible version
        run: |
          ansible-playbook --version
          ansible-galaxy role list || true
          ansible-galaxy collection list || true

      - name: Copy file private key && Set Permission
        working-directory: vm-template/build-env/
        run: |
          chmod 600 spec_rsa
          cp spec_rsa ../ansible/
          cp spec_rsa ../packer/
          cp spec_rsa ../serverspec/
          chmod +x ../serverspec/start.sh

      # DEBUG
      - name: Check Permission
        run: |
          ls -l vm-template/build-env/spec_rsa
          ls -l vm-template/ansible/spec_rsa
          ls -l vm-template/packer/spec_rsa
          ls -l vm-template/serverspec/spec_rsa
          ls -l vm-template/serverspec/start.sh

      - name: Initialize Packer
        working-directory: vm-template/packer/
        run: >-
          packer plugins install github.com/hashicorp/vsphere

      - name: Run Packer
        working-directory: vm-template/packer/
        run: >-
          packer build -force -machine-readable
          -var-file="general.pkrvars.hcl"
          -var "vsphere_endpoint=${{ env.ANSIBLE_VCENTER_HOSTNAME }}"
          -var "vsphere_username=${{ env.ANSIBLE_VCENTER_USER }}"
          -var "vsphere_password=${{ secrets.VSPHERE_PASSWORD }}"
          -var "vsphere_datacenter=${{ env.ANSIBLE_VCENTER_DATACENTER }}"
          -var "vsphere_cluster=${{ env.ANSIBLE_VCENTER_CLUSTER }}"
          -var "vsphere_folder=${{ env.ANSIBLE_VCENTER_FOLDER }}"
          -var "vsphere_resource_pool=${{ env.ANSIBLE_VCENTER_POOL }}"
          -var "vsphere_datastore=${{ env.ANSIBLE_VCENTER_DATASTORE }}"
          -var "vm_network_card=${{ env.ANSIBLE_VCENTER_PORT_GROUP }}"
          -var "vm_netmask='${{ env.ANSIBLE_VCENTER_VM_NETMASK }}'"
          -var "vm_gateway='${{ env.ANSIBLE_VCENTER_VM_GW4 }}'"
          -var "vm_dns='${{ env.ANSIBLE_VCENTER_VM_DNS }}'"
          -var "common_os_family=${{ inputs.common_os_family }}"
          -var "common_os_name=${{ inputs.common_os_name }}"
          -var "common_os_version=${{ inputs.common_os_version }}"
          -var "vm_ip_address=${{ inputs.vm_ip_address }}"
          ${{ inputs.common_os_family }}/${{ inputs.common_os_name }}/${{ inputs.common_os_version }}/

      # DEBUG
      - name: Check Packer output
        working-directory: vm-template/packer/
        run: |
          cat manifest.json

      - name: Load Packer output to GitHub env
        working-directory: vm-template/packer/
        run: |
          echo "PACKER_TEMPLATE_NAME=$(jq -r '.builds[0].artifact_id' 'manifest.json')" >> $GITHUB_ENV
          echo "SERVERSPEC_COMMAND=$(jq -r '.builds[0].custom_data.serverspec_command' 'manifest.json')" >> $GITHUB_ENV
          echo "OS_BUILD_VERSION=$(jq -r '.builds[0].custom_data.os_build_version' 'manifest.json')" >> $GITHUB_ENV
          echo "OS_BUILD_DISTRIBUTION=$(jq -r '.builds[0].custom_data.os_build_distribution' 'manifest.json')" >> $GITHUB_ENV

      - name: Run Ansible
        id: ansible
        working-directory: vm-template/ansible/
        env:
          ANSIBLE_HASHI_VAULT_TOKEN: ${{ secrets.ANSIBLE_HASHI_VAULT_TOKEN }}
        run: >-
          ansible-playbook
          -i inventories/${{ inputs.target_site }}/hosts
          -e "ansible_hashi_vault_addr=${{ env.ANSIBLE_HASHI_VAULT_ADDR }}"
          -e "vsphere_endpoint=${{ env.ANSIBLE_VCENTER_HOSTNAME }}"
          -e "vsphere_username=${{ env.ANSIBLE_VCENTER_USER }}"
          -e "vsphere_password=${{ secrets.VSPHERE_PASSWORD }}"
          -e "vsphere_datacenter=${{ env.ANSIBLE_VCENTER_DATACENTER }}"
          -e "vsphere_cluster=${{ env.ANSIBLE_VCENTER_CLUSTER }}"
          -e "vsphere_folder=${{ env.ANSIBLE_VCENTER_FOLDER }}"
          -e "vsphere_resource_pool=${{ env.ANSIBLE_VCENTER_POOL }}"
          -e "vsphere_datastore=${{ env.ANSIBLE_VCENTER_DATASTORE }}"
          -e "vsphere_deploy_template=${{ env.PACKER_TEMPLATE_NAME }}"
          -e "vsphere_deploy_new_vm=${{ env.PACKER_TEMPLATE_NAME }}-tmp"
          -e "serverspec_command='${{ env.SERVERSPEC_COMMAND }}'"
          -e "os_build_version=${{ env.OS_BUILD_VERSION }}"
          -e "os_build_distribution=${{ env.OS_BUILD_DISTRIBUTION }}"
          -e "target_env=${{ inputs.target_site }}"
          -e "ansible_host=${{ inputs.vm_ip_address }}"
          main.yml

      - name: Clean Ansible
        if: ${{ failure() && steps.ansible.outcome == 'failure' }}
        working-directory: vm-template/ansible/
        env:
          ANSIBLE_HASHI_VAULT_TOKEN: ${{ secrets.ANSIBLE_HASHI_VAULT_TOKEN }}
        run: >-
          ansible-playbook
          -i inventories/${{ inputs.target_site }}/hosts
          -e "ansible_hashi_vault_addr=${{ env.ANSIBLE_HASHI_VAULT_ADDR }}"
          -e "vsphere_endpoint=${{ env.ANSIBLE_VCENTER_HOSTNAME }}"
          -e "vsphere_username=${{ env.ANSIBLE_VCENTER_USER }}"
          -e "vsphere_password=${{ secrets.VSPHERE_PASSWORD }}"
          -e "vsphere_deploy_new_vm=${{ env.PACKER_TEMPLATE_NAME }}-tmp"
          delete_vm.yml